from __future__ import print_function
from httplib2 import Http
import googleapiclient
from googleapiclient import discovery
from googleapiclient.discovery import build
from oauth2client import file, client, tools
import uritemplate

# Authorizing API usage
try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

SCOPES = 'https://www.googleapis.com/auth/calendar'
store = file.Storage('storage.json')
creds = store.get()
if not creds or creds.invalid:
    flow = client.flow_from_clientsecrets('client_secret.json',SCOPES)
    creds = tools.run_flow(flow,store,flags) \
        if flags else tools.run(flow, store)
CAL = build('calendar', 'v3', http=creds.authorize(Http()))

# Creating an Event
# Pass in name, time zone, date and time for start and stop
# Needs user input
def createEvent():
    EVENT = {
        'summary': 'Dinner and whatnot',
        'start' : {"timeZone": "America/Phoenix",
                    "dateTime": "2017-08-06T19:00:00"},
        'end' : {"timeZone": "America/Phoenix",
                "dateTime": "2017-08-06T20:00:00"}
        }
    CAL.events().insert(calendarId = 'primary',
        sendNotifications = False, body=EVENT).execute()
    return

# Find an event
# Pass in search (name, date, etc)
def findEvent():
    event_list = []
    event = CAL.events().get(calendarId='primary', eventId='').execute()

    for key, value in event.iteritems():
        if key == 'items':
            event_list.append((next(item for item in value if item['summary'] == 'Food'), None))
    return event_list

print (findEvent())

# # Deleting an Event
# def deleteEvent():
#     CAL.events().delete(calendarId='primary', eventId='eventId').execute()
#     return
#
# # Check if event colides with another created event
# def checkEvent():
#     return